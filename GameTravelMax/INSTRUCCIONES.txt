Resumen

Jugador: se mueve, agarra y suelta objetos.

CanHold: detecta qu√© objeto est√° cerca para agarrar.

PickableObject (SO): almacena datos (nombre, valor).

Pickable: une los datos a los prefabs f√≠sicos.

DropZone: elimina objetos y notifica al GameManager.

GameManager: lleva el conteo, el puntaje y la lista de objetos eliminados.

FadeText: muestra mensajes temporales en pantalla.

CameraFollow: c√°mara que sigue suavemente al jugador.

Spawner: genera objetos aleatorios cada cierto tiempo.

1. Player.cs (Jugador)

Este script controla el movimiento e interacci√≥n del jugador:

Movimiento:

El jugador se mueve seg√∫n la entrada del teclado (WASD o joystick) con la nueva Input System (OnMove).

La direcci√≥n se guarda en lastDirection, lo que permite que cuando el jugador deje de moverse, siga mirando hacia la √∫ltima direcci√≥n en la que camin√≥.

El movimiento se aplica con transform.Translate, y la rotaci√≥n con Quaternion.Slerp para suavizar el giro.

Interacci√≥n con objetos:

Si el jugador presiona la tecla de interacci√≥n (OnInteract), el sistema revisa si tiene un objeto en la mano.

Si no tiene ‚Üí intenta agarrar (PickObject).

Si ya tiene uno ‚Üí lo suelta (DropObject).

Los objetos recogidos se mantienen pegados a un holdPoint (un objeto vac√≠o hijo del jugador).

Cuando el jugador sostiene un objeto, este se mueve f√≠sicamente hacia el holdPoint con una fuerza (MoveObject), para que se vea natural.



2. PickableObject.cs (Scriptable Object de datos)

Este es un almacenador de datos reutilizable:

Define el nombre (objectName) y el valor (objectValue) de un objeto recogible.

Es un ScriptableObject, por lo que se crean instancias en la carpeta Assets (ejemplo: Botella, Lata, Caja).

Cada prefab de objeto en la escena tendr√° un componente Pickable que referencia a uno de estos PickableObject.

Esto permite que diferentes prefabs compartan los mismos datos sin duplicaci√≥n.


üß© 3. Pickable.cs (Vinculaci√≥n de datos a un prefab)

Este script se adjunta a los prefabs recogibles en la escena:

Contiene una referencia a un PickableObject (el ScriptableObject de datos).

Cuando un objeto entra en la DropZone, el GameManager accede a sus datos (objectName, objectValue).

De esta forma, un mismo prefab f√≠sico (ej. "BotellaPrefab") puede tener los datos de un PickableObject ("Botella", valor = 10).


üéØ 4. CanHold.cs (Detecci√≥n de objetos cercanos)

Este script detecta si el jugador puede recoger un objeto:

Tiene un OnTriggerEnter que revisa si un objeto con el tag "Pickable" entra en la zona de alcance del jugador.

Guarda una referencia en holdableObject y activa canHold.

El Player.cs consulta estas variables para decidir si puede agarrar un objeto.


üóëÔ∏è 5. DropZone.cs (Zona de eliminaci√≥n)

Este script define una zona especial (ejemplo: un contenedor o √°rea de reciclaje):

Cuando un objeto con el tag "Pickable" entra en el OnTriggerEnter, busca el componente Pickable y obtiene su PickableObject.

Llama a gameManager.RegisterDrop(pickable.data) para notificar al GameManager.

Finalmente destruye el objeto f√≠sico (Destroy(other.gameObject)).


üèÜ 6. GameManager.cs (Gesti√≥n del progreso)

Este script centraliza el conteo y puntuaci√≥n del juego:

Variables:

score ‚Üí total de puntos acumulados.

objectCounter ‚Üí cu√°ntos objetos se eliminaron.

eliminatedObjects ‚Üí lista de PickableObject eliminados.

UI:

Usa TextMeshProUGUI (textCounter y textScore) para mostrar conteo y puntuaci√≥n en pantalla.

Referencia a FadeText para mostrar mensajes temporales.

M√©todo principal:

RegisterDrop(PickableObject objData) se llama desde DropZone.

Aumenta el contador y el puntaje seg√∫n objData.objectValue.

Guarda el objeto en la lista eliminatedObjects.

Llama a fadeText.ShowMessage para mostrar un aviso en pantalla del tipo:

Se elimin√≥ Botella (+10)


üí¨ 7. FadeText.cs (Mensajes temporales en pantalla)

Este script controla un texto que aparece y se desvanece:

Usa un TextMeshProUGUI asignado en el Canvas.

M√©todo ShowMessage(string message):

Aparece instant√°neamente con alpha = 1.

Permanece visible durante displayTime.

Luego se desvanece suavemente a alpha = 0 en fadeDuration.

Previene superposici√≥n cancelando corutinas si ya hay un mensaje activo.

Se usa principalmente para mostrar qu√© objeto fue eliminado y cu√°ntos puntos sum√≥.


 8. CameraFollow.cs (C√°mara suave)

Este script hace que la c√°mara siga al jugador:

Usa Vector3.SmoothDamp para interpolar suavemente la posici√≥n de la c√°mara hacia la del jugador m√°s un offset.

El movimiento es m√°s fluido que un Lerp.

Corre en LateUpdate para actualizarse despu√©s de que el jugador se haya movido.


9. Spawner.cs (Generador de objetos)

Este script instancia objetos recogibles en la escena cada cierto tiempo:

Tiene una lista prefabGameObjects con prefabs configurados en el inspector.

Cada 5 segundos selecciona un prefab al azar con Random.Range y lo instancia en una posici√≥n del mundo.

Permite mantener un flujo constante de objetos en el nivel.


